package com.atypon.project.util;


import java.security.*;
import java.util.Base64;

/**
 * Utility class
 */
// TODO addBlock a util to read configuration
public final class Utils {

    // noninstantiable
    private Utils() {
    }

    /**
     * Apply Elliptic Curve Digital Signature Algorithm
     *
     * @param privateKey of the wallet
     * @param input      to be hashed
     * @return signature
     */
    public static byte[] applyECDSASig(PrivateKey privateKey, String input) {
        Signature dsa;
        byte[] output;
        try {
            dsa = Signature.getInstance("ECDSA", "BC");
            dsa.initSign(privateKey);
            byte[] strByte = input.getBytes();
            dsa.update(strByte);
            output = dsa.sign();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return output;
    }

    /**
     * Verify the key generated by Elliptic Curve Digital Signature Algorithm
     *
     * @param publicKey of the wallet
     * @param data      to be verified
     * @param signature to be verified
     * @return if the signature verified or not
     */
    public static boolean verifyECDSASig(PublicKey publicKey, byte[] signature, String data) {
        try {
            Signature ecdsaVerify = Signature.getInstance("ECDSA", "BC");
            ecdsaVerify.initVerify(publicKey);
            ecdsaVerify.update(data.getBytes());
            return ecdsaVerify.verify(signature);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param key to be process
     * @return String form of the key
     */
    public static String getStringFromKey(Key key) {
        return Base64.getEncoder().encodeToString(key.getEncoded());
    }

    /**
     * Wait for in milli seconds
     */
    public static void waitForInMillis(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}